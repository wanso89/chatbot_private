import React, { useState, useRef, useEffect } from 'react';
import { 
  FiDatabase, FiSearch, FiCode, FiTable, FiSend, FiLoader, FiAlertCircle, 
  FiHelpCircle, FiInfo, FiPlay, FiExternalLink, FiTrendingUp, FiCommand, 
  FiZap, FiArrowRight, FiColumns, FiTerminal, FiCpu, FiSquare, FiUser,
  FiBarChart2, FiPieChart, FiList, FiClock, FiMessageSquare, FiMessageCircle,
  FiSave, FiChevronRight, FiChevronLeft, FiActivity, FiX
} from 'react-icons/fi';
import { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';
import { vs2015 } from 'react-syntax-highlighter/dist/esm/styles/prism';
import sql from 'react-syntax-highlighter/dist/esm/languages/prism/sql';
import {
  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,
  PieChart, Pie, Cell, LineChart, Line, AreaChart, Area
} from 'recharts';

// 구문 강조를 위한 언어 등록
SyntaxHighlighter.registerLanguage('sql', sql);

// 색상 테마 정의
const CHART_COLORS = ['#6366f1', '#8b5cf6', '#ec4899', '#14b8a6', '#f97316', '#f43f5e', '#64748b', '#6ee7b7'];

// 랜덤 색상 생성 함수
const getRandomColor = () => {
  return CHART_COLORS[Math.floor(Math.random() * CHART_COLORS.length)];
};

// DB 스키마를 사용자 친화적으로 파싱하는 함수
const parseDBSchema = (schemaText) => {
  if (!schemaText) return null;
  
  try {
    // 테이블 기준으로 분리
    const tableMatches = schemaText.match(/CREATE TABLE.*?;/gs) || [];
    
    if (tableMatches.length === 0) {
      // DDL이 없는 경우 원본 텍스트 반환
      return (
        <pre className="text-xs text-gray-400 whitespace-pre-wrap">
          {schemaText}
        </pre>
      );
    }
    
    // 테이블별 파싱 결과
    const parsedTables = tableMatches.map(tableSchema => {
      // 테이블 이름 추출
      const tableNameMatch = tableSchema.match(/CREATE TABLE (?:"([^"]+)"|([^\s(]+))/i);
      const tableName = tableNameMatch ? (tableNameMatch[1] || tableNameMatch[2]).replace(/"/g, '') : '알 수 없는 테이블';
      
      // 컬럼 정의 추출
      const columnsMatch = tableSchema.match(/\(([\s\S]*)\)/);
      if (!columnsMatch) return { tableName, columns: [] };
      
      const columnsText = columnsMatch[1];
      const columnLines = columnsText.split(',').map(line => line.trim()).filter(line => line && !line.startsWith('CONSTRAINT') && !line.startsWith('PRIMARY KEY') && !line.startsWith('FOREIGN KEY'));
      
      // 각 컬럼 파싱
      const columns = columnLines.map(columnLine => {
        const columnParts = columnLine.split(' ');
        if (columnParts.length < 2) return null;
        
        // 컬럼명과 타입 분리
        let columnName = columnParts[0].replace(/"/g, '');
        let dataType = columnParts.slice(1).join(' ');
        let isPrimaryKey = columnLine.toLowerCase().includes('primary key');
        
        return { columnName, dataType, isPrimaryKey };
      }).filter(Boolean);
      
      return { tableName, columns };
    });
    
    // 테이블별 UI 렌더링
    return (
      <div className="space-y-3">
        {parsedTables.map((table, idx) => (
          <div key={idx} className="bg-gray-800/30 rounded-md overflow-hidden border border-gray-700/40">
            <div className="bg-gray-800/70 px-3 py-2 flex items-center gap-2 text-sm text-indigo-300 font-medium">
              <FiTable size={14} />
              <span>{table.tableName}</span>
            </div>
            <div>
              <table className="w-full text-xs">
                <thead className="bg-gray-800/50">
                  <tr>
                    <th className="py-1.5 px-3 text-left text-gray-400 font-medium">컬럼명</th>
                    <th className="py-1.5 px-3 text-left text-gray-400 font-medium">데이터 타입</th>
                  </tr>
                </thead>
                <tbody>
                  {table.columns.map((column, colIdx) => (
                    <tr key={colIdx} className={`${colIdx % 2 === 0 ? 'bg-gray-800/10' : 'bg-gray-800/5'} border-t border-gray-700/20`}>
                      <td className="py-1.5 px-3 text-gray-300 flex items-center gap-1.5">
                        {column.isPrimaryKey && <span className="w-2 h-2 bg-amber-400 rounded-full"></span>}
                        {column.columnName}
                      </td>
                      <td className="py-1.5 px-3 text-gray-400 font-mono text-[10px]">{column.dataType}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        ))}
      </div>
    );
  } catch (error) {
    console.error("스키마 파싱 오류:", error);
    // 파싱 실패 시 원본 텍스트 반환
    return (
      <pre className="text-xs text-gray-400 whitespace-pre-wrap">
        {schemaText}
      </pre>
    );
  }
};

// 마크다운 테이블을 HTML 테이블로 변환하는 함수
const markdownTableToHtml = (markdown) => {
  if (!markdown || !markdown.includes("|")) return null;

  try {
    const rows = markdown.trim().split("\n");
    const headerRow = rows[0];
    const separatorRow = rows[1];
    
    // 헤더와 구분선이 markdown 테이블 형식인지 확인
    if (!headerRow.includes("|") || !separatorRow?.includes("|-")) {
      return null;
    }
    
    // 테이블 헤더 행 생성
    const headers = headerRow
      .split("|")
      .filter(cell => cell.trim().length > 0)
      .map(cell => cell.trim());
      
    // HTML 테이블 생성
    let tableHtml = `
      <table class="w-full border-collapse">
        <thead>
          <tr class="bg-gray-800/80 text-left">
            ${headers.map(header => `<th class="px-3 py-2 text-indigo-300 font-medium text-sm">${header}</th>`).join("")}
          </tr>
        </thead>
        <tbody>
    `;
    
    // 테이블 데이터 행 생성 (구분선 행 제외하고 시작)
    const dataRows = rows.slice(2);
    dataRows.forEach((row, i) => {
      if (!row.includes("|")) return;
      
      const cells = row
        .split("|")
        .filter(cell => cell.trim().length > 0)
        .map(cell => cell.trim());
        
      tableHtml += `
        <tr class="${i % 2 === 0 ? 'bg-gray-800/30' : 'bg-gray-800/10'}">
          ${cells.map(cell => `<td class="border-t border-gray-700/30 px-3 py-2 text-gray-300 text-sm">${cell}</td>`).join("")}
        </tr>
      `;
    });
    
    tableHtml += `
        </tbody>
      </table>
    `;
    
    return <div dangerouslySetInnerHTML={{ __html: tableHtml }} className="overflow-x-auto max-w-full rounded-md" />;
  } catch (error) {
    console.error("마크다운 테이블 파싱 오류:", error);
    return null;
  }
};

// 메시지 버블 컴포넌트
const MessageBubble = ({ type, content, timestamp, sql, result, onViewChart = () => {} }) => {
  const isUser = type === 'user';
  const messageTime = timestamp ? new Date(timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : '';
  const [showSql, setShowSql] = useState(false);
  const [showResult, setShowResult] = useState(false);
  
  return (
    <div className={`flex ${isUser ? 'justify-end' : 'justify-start'} mb-4`}>
      <div className={`flex ${isUser ? 'flex-row-reverse' : 'flex-row'} max-w-[85%] items-end gap-2`}>
        {/* 프로필 아이콘 */}
        <div className={`rounded-full flex-shrink-0 w-8 h-8 flex items-center justify-center 
          ${isUser ? 'bg-indigo-100 text-indigo-600' : 'bg-gray-800 text-indigo-400'}`}>
          {isUser ? <FiUser size={14} /> : <FiCpu size={14} />}
        </div>
        
        {/* 메시지 콘텐츠 */}
        <div className="max-w-[calc(100%-40px)]">
          <div className={`rounded-2xl px-4 py-2.5 
            ${isUser 
              ? 'bg-indigo-600 text-white' 
              : 'bg-gray-800/80 border border-gray-700/50 text-white'
            }`}
          >
            <div className="text-sm">
              {content}
            </div>
            
            {/* SQL 및 결과 영역 (어시스턴트 메시지만 해당) */}
            {!isUser && sql && (
              <div className="mt-3 pt-3 border-t border-gray-700/30">
                {/* 탭 버튼 */}
                <div className="flex gap-2 mb-2">
                  <button 
                    className={`flex items-center gap-1 px-2 py-1 ${showSql ? 'bg-indigo-600/70' : 'bg-gray-700/50 hover:bg-gray-700'} rounded-md text-xs text-gray-300 transition-colors`}
                    onClick={() => {
                      setShowSql(!showSql);
                      setShowResult(false);
                    }}
                  >
                    <FiCode size={10} />
                    <span>SQL</span>
                  </button>
                  
                  {result && (
                    <button 
                      className={`flex items-center gap-1 px-2 py-1 ${showResult ? 'bg-indigo-600/70' : 'bg-gray-700/50 hover:bg-gray-700'} rounded-md text-xs text-gray-300 transition-colors`}
                      onClick={() => {
                        setShowResult(!showResult);
                        setShowSql(false);
                      }}
                    >
                      <FiTable size={10} />
                      <span>결과</span>
                    </button>
                  )}
                  
                  <button 
                    className="flex items-center gap-1 px-2 py-1 bg-gray-700/50 hover:bg-gray-700 rounded-md text-xs text-gray-300 transition-colors"
                    onClick={() => {
                      onViewChart();
                      setShowSql(false);
                      setShowResult(false);
                    }}
                  >
                    <FiBarChart2 size={10} />
                    <span>차트</span>
                  </button>
                </div>
                
                {/* SQL 코드 */}
                {showSql && (
                  <div className="mt-2 rounded-md overflow-hidden text-xs">
                    <SyntaxHighlighter
                      language="sql"
                      style={vs2015}
                      customStyle={{ 
                        margin: 0,
                        padding: '0.75rem',
                        borderRadius: '0.375rem',
                        fontSize: '0.75rem',
                        backgroundColor: 'rgba(30, 41, 59, 0.7)'
                      }}
                    >
                      {sql}
                    </SyntaxHighlighter>
                  </div>
                )}
                
                {/* 결과 테이블 */}
                {showResult && result && (
                  <div className="mt-2 rounded-md overflow-hidden">
                    {result.startsWith('⚠️') || result.startsWith('❌') ? (
                      <div className="px-3 py-2 text-yellow-300 flex items-start gap-2 text-xs bg-yellow-900/20 rounded-md">
                        <FiAlertCircle size={14} className="mt-0.5 flex-shrink-0" />
                        <p>{result}</p>
                      </div>
                    ) : (
                      markdownTableToHtml(result) || (
                        <div className="px-3 py-2 text-gray-300 text-xs">
                          {result}
                        </div>
                      )
                    )}
                  </div>
                )}
              </div>
            )}
          </div>
          
          {/* 타임스탬프 */}
          <div className={`text-xs text-gray-400 mt-1 ${isUser ? 'text-right' : 'text-left'}`}>
            {messageTime}
          </div>
        </div>
      </div>
    </div>
  );
};

// 차트 컴포넌트
const DataChart = ({ data, type = 'bar' }) => {
  if (!data || data.length === 0) {
    return (
      <div className="flex items-center justify-center h-52 bg-gray-800/30 rounded-md border border-gray-700/50">
        <div className="text-gray-400 text-sm">차트로 표시할 데이터가 없습니다</div>
      </div>
    );
  }
  
  // 테이블 데이터를 차트 데이터로 변환
  const chartData = data.map(item => ({
    ...item,
    // 값으로 숫자만 사용
    ...Object.keys(item).reduce((acc, key) => {
      // 숫자로 변환 가능한 값만 숫자로 변환
      const value = parseFloat(item[key]);
      if (!isNaN(value)) {
        acc[key] = value;
      }
      return acc;
    }, {})
  }));
  
  // 차트에 표시할 필드 선택 (첫 번째 필드는 레이블로 사용)
  const fields = Object.keys(chartData[0]);
  const labelField = fields[0];
  const valueFields = fields.slice(1).filter(field => {
    // 모든 값이 숫자인 필드만 선택
    return chartData.every(item => !isNaN(parseFloat(item[field])));
  });
  
  switch (type) {
    case 'bar':
      return (
        <div className="h-52 bg-gray-800/30 rounded-md border border-gray-700/50 p-3">
          <ResponsiveContainer width="100%" height="100%">
            <BarChart data={chartData} margin={{ top: 5, right: 5, bottom: 20, left: 0 }}>
              <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
              <XAxis dataKey={labelField} tick={{ fill: '#9ca3af' }} />
              <YAxis tick={{ fill: '#9ca3af' }} />
              <Tooltip 
                contentStyle={{ backgroundColor: '#1f2937', border: '1px solid #374151', borderRadius: '0.375rem' }}
                labelStyle={{ color: '#e5e7eb' }}
                itemStyle={{ color: '#e5e7eb' }}
              />
              <Legend wrapperStyle={{ color: '#9ca3af' }} />
              {valueFields.map((field, index) => (
                <Bar key={index} dataKey={field} name={field} fill={CHART_COLORS[index % CHART_COLORS.length]} />
              ))}
            </BarChart>
          </ResponsiveContainer>
        </div>
      );
    case 'pie':
      return (
        <div className="h-52 bg-gray-800/30 rounded-md border border-gray-700/50 p-3">
          <ResponsiveContainer width="100%" height="100%">
            <PieChart>
              <Pie
                data={chartData}
                cx="50%"
                cy="50%"
                labelLine={false}
                label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                outerRadius={70}
                dataKey={valueFields[0]}
                nameKey={labelField}
              >
                {chartData.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={CHART_COLORS[index % CHART_COLORS.length]} />
                ))}
              </Pie>
              <Tooltip 
                contentStyle={{ backgroundColor: '#1f2937', border: '1px solid #374151', borderRadius: '0.375rem' }}
                labelStyle={{ color: '#e5e7eb' }}
                itemStyle={{ color: '#e5e7eb' }}
              />
              <Legend wrapperStyle={{ color: '#9ca3af' }} />
            </PieChart>
          </ResponsiveContainer>
        </div>
      );
    case 'line':
      return (
        <div className="h-52 bg-gray-800/30 rounded-md border border-gray-700/50 p-3">
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={chartData} margin={{ top: 5, right: 5, bottom: 20, left: 0 }}>
              <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
              <XAxis dataKey={labelField} tick={{ fill: '#9ca3af' }} />
              <YAxis tick={{ fill: '#9ca3af' }} />
              <Tooltip 
                contentStyle={{ backgroundColor: '#1f2937', border: '1px solid #374151', borderRadius: '0.375rem' }}
                labelStyle={{ color: '#e5e7eb' }}
                itemStyle={{ color: '#e5e7eb' }}
              />
              <Legend wrapperStyle={{ color: '#9ca3af' }} />
              {valueFields.map((field, index) => (
                <Line key={index} type="monotone" dataKey={field} name={field} stroke={CHART_COLORS[index % CHART_COLORS.length]} />
              ))}
            </LineChart>
          </ResponsiveContainer>
        </div>
      );
    case 'area':
      return (
        <div className="h-52 bg-gray-800/30 rounded-md border border-gray-700/50 p-3">
          <ResponsiveContainer width="100%" height="100%">
            <AreaChart data={chartData} margin={{ top: 5, right: 5, bottom: 20, left: 0 }}>
              <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
              <XAxis dataKey={labelField} tick={{ fill: '#9ca3af' }} />
              <YAxis tick={{ fill: '#9ca3af' }} />
              <Tooltip 
                contentStyle={{ backgroundColor: '#1f2937', border: '1px solid #374151', borderRadius: '0.375rem' }}
                labelStyle={{ color: '#e5e7eb' }}
                itemStyle={{ color: '#e5e7eb' }}
              />
              <Legend wrapperStyle={{ color: '#9ca3af' }} />
              {valueFields.map((field, index) => (
                <Area 
                  key={index} 
                  type="monotone" 
                  dataKey={field} 
                  name={field} 
                  fill={CHART_COLORS[index % CHART_COLORS.length]}
                  stroke={CHART_COLORS[index % CHART_COLORS.length]}
                  fillOpacity={0.3}
                />
              ))}
            </AreaChart>
          </ResponsiveContainer>
        </div>
      );
    default:
      return null;
  }
};

// 테이블 데이터 파서
const parseTableData = (markdownTable) => {
  if (!markdownTable || !markdownTable.includes('|')) return null;
  
  try {
    const rows = markdownTable.trim().split('\n');
    const headerRow = rows[0];
    const separatorRow = rows[1];
    
    if (!headerRow.includes('|') || !separatorRow?.includes('|-')) {
      return null;
    }
    
    // 헤더 추출
    const headers = headerRow
      .split('|')
      .filter(cell => cell.trim().length > 0)
      .map(cell => cell.trim());
    
    // 데이터 행 추출 (구분선 행 제외)
    const dataRows = rows.slice(2);
    const data = dataRows.map(row => {
      if (!row.includes('|')) return null;
      
      const cells = row
        .split('|')
        .filter(cell => cell.trim().length > 0)
        .map(cell => cell.trim());
      
      // 객체로 변환
      return headers.reduce((obj, header, index) => {
        obj[header] = cells[index] || '';
        return obj;
      }, {});
    }).filter(Boolean);
    
    return data;
  } catch (error) {
    console.error('테이블 데이터 파싱 오류:', error);
    return null;
  }
};

// 예시 질문 데이터
const exampleQuestions = [
  "사용자 테이블에서 모든 사용자의 이름과 이메일을 보여줘",
  "최근 일주일간 등록된 사용자 수는?",
  "게시글이 가장 많은 사용자 5명을 보여줘",
  "각 부서별 평균 급여가 얼마인지 알려줘",
  "이번 달에 가장 많이 판매된 상품 3개는?"
];

const SQLQueryPage = () => {
  const [question, setQuestion] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [generatedSQL, setGeneratedSQL] = useState('');
  const [queryResult, setQueryResult] = useState(null);
  const [errorMessage, setErrorMessage] = useState('');
  const [dbSchema, setDbSchema] = useState('');
  const [showSchema, setShowSchema] = useState(false);
  const [llmResponse, setLlmResponse] = useState('');
  const [showLLMResponse, setShowLLMResponse] = useState(false);
  const [activeTab, setActiveTab] = useState('sql'); // 'sql' 또는 'ai'
  const [chatMessages, setChatMessages] = useState([
    {
      type: 'assistant',
      content: '안녕하세요! 데이터베이스에 대해 자연어로 질문하시면 SQL을 생성하고 결과를 보여드립니다.',
      timestamp: new Date().getTime(),
    }
  ]);
  const [queryHistory, setQueryHistory] = useState([]);
  const [showHistory, setShowHistory] = useState(false);
  const [chartType, setChartType] = useState('bar');
  const [showChart, setShowChart] = useState(false);
  const [tableData, setTableData] = useState(null);
  const inputRef = useRef(null);
  const messagesEndRef = useRef(null);
  
  // 메시지 끝으로 스크롤
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };
  
  // 메시지 추가 시 스크롤
  useEffect(() => {
    scrollToBottom();
  }, [chatMessages]);
  
  // 초기 로딩 시 DB 스키마 정보 가져오기
  useEffect(() => {
    const fetchDbSchema = async () => {
      try {
        // 상대 경로로 변경
        const response = await fetch('/api/db-schema');
        if (!response.ok) {
          const text = await response.text();
          console.error('스키마 로딩 실패 응답:', text);
          throw new Error(`스키마 로딩 실패: ${response.status} ${response.statusText}`);
        }
        
        const data = await response.json();
        
        // 응답 형식 변경에 따른 처리 추가
        if (data.status === 'error') {
          console.error('DB 스키마 로딩 오류:', data.error);
          setErrorMessage('데이터베이스 스키마를 불러올 수 없습니다.');
          // 오류가 있어도 schema 필드에 메시지가 들어있으면 표시
          if (data.schema) {
            setDbSchema(data.schema);
          }
        } else {
          setDbSchema(data.schema || '스키마 정보가 없습니다.');
        }
      } catch (error) {
        console.error('DB 스키마 로딩 오류:', error);
        setErrorMessage('데이터베이스 스키마를 불러올 수 없습니다.');
      }
    };
    
    // 쿼리 히스토리 로드
    const loadQueryHistory = () => {
      const savedHistory = localStorage.getItem('sql_query_history');
      if (savedHistory) {
        try {
          setQueryHistory(JSON.parse(savedHistory));
        } catch (error) {
          console.error('쿼리 히스토리 로딩 오류:', error);
          localStorage.removeItem('sql_query_history');
        }
      }
    };
    
    fetchDbSchema();
    loadQueryHistory();
  }, []);
  
  // 히스토리에 쿼리 추가
  const addToHistory = (question, sql, result) => {
    const newHistoryItem = {
      id: Date.now(),
      question,
      sql,
      result,
      timestamp: new Date().getTime()
    };
    
    const updatedHistory = [newHistoryItem, ...queryHistory].slice(0, 20); // 최대 20개 유지
    setQueryHistory(updatedHistory);
    localStorage.setItem('sql_query_history', JSON.stringify(updatedHistory));
  };
  
  // 히스토리에서 쿼리 불러오기
  const loadFromHistory = (historyItem) => {
    setQuestion(historyItem.question);
    setGeneratedSQL(historyItem.sql);
    setQueryResult(historyItem.result);
    setActiveTab('sql');
    
    // 테이블 데이터 파싱
    if (historyItem.result) {
      setTableData(parseTableData(historyItem.result));
    }
  };
  
  // SQL 쿼리 실행 함수
  const handleSubmit = async (e) => {
    if (e) e.preventDefault();
    
    if (!question.trim()) {
      setErrorMessage('질문을 입력해주세요.');
      inputRef.current?.focus();
      return;
    }
    
    // 새 사용자 메시지 추가
    setChatMessages(prev => [
      ...prev, 
      {
        type: 'user',
        content: question,
        timestamp: new Date().getTime()
      }
    ]);
    
    setIsLoading(true);
    setErrorMessage('');
    setGeneratedSQL('');
    setQueryResult(null);
    setLlmResponse('');
    setShowLLMResponse(false);
    setActiveTab('sql');
    setTableData(null);
    setShowChart(false);
    
    try {
      // 상대 경로로 변경
      const response = await fetch('/api/sql-query', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ question: question.trim() }),
      });
      
      // 오류 응답 처리 개선
      if (!response.ok) {
        const errorText = await response.text();
        console.error('API 오류 응답:', errorText);
        throw new Error(errorText || '쿼리 실행 중 오류가 발생했습니다.');
      }
      
      const data = await response.json();
      setGeneratedSQL(data.sql);
      setQueryResult(data.results);
      
      // 테이블 데이터 파싱
      setTableData(parseTableData(data.results));
      
      // 히스토리에 추가
      addToHistory(question, data.sql, data.results);
      
      // 응답 메시지 추가
      let responseMessage = '쿼리가 성공적으로 실행되었습니다.';
      if (data.results.startsWith('⚠️') || data.results.startsWith('❌')) {
        responseMessage = '쿼리 실행 중 오류가 발생했습니다: ' + data.results;
      }
      
      setChatMessages(prev => [
        ...prev, 
        {
          type: 'assistant',
          content: responseMessage,
          timestamp: new Date().getTime(),
          sql: data.sql,
          result: data.results
        }
      ]);
      
      // 입력 필드 초기화
      setQuestion('');
      
    } catch (error) {
      console.error('SQL 쿼리 오류:', error);
      setErrorMessage(error.message || '서버 오류가 발생했습니다.');
      
      // 오류 메시지 추가
      setChatMessages(prev => [
        ...prev, 
        {
          type: 'assistant',
          content: `오류: ${error.message || '서버 오류가 발생했습니다.'}`,
          timestamp: new Date().getTime()
        }
      ]);
    } finally {
      setIsLoading(false);
    }
  };
  
  // SQL-LLM 통합 API 호출 함수 추가
  const handleSqlLlmQuery = async () => {
    if (!question.trim()) {
      setErrorMessage('질문을 입력해주세요.');
      inputRef.current?.focus();
      return;
    }
    
    // 새 사용자 메시지 추가
    setChatMessages(prev => [
      ...prev, 
      {
        type: 'user',
        content: question,
        timestamp: new Date().getTime()
      }
    ]);
    
    setIsLoading(true);
    setErrorMessage('');
    setGeneratedSQL('');
    setQueryResult(null);
    setLlmResponse('');
    setShowLLMResponse(true);
    setActiveTab('ai');
    setTableData(null);
    setShowChart(false);
    
    try {
      // 상대 경로로 변경
      const response = await fetch('/api/sql-and-llm', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ question: question.trim() }),
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('SQL-LLM API 오류 응답:', errorText);
        throw new Error(errorText || 'SQL-LLM 쿼리 실행 중 오류가 발생했습니다.');
      }
      
      const data = await response.json();
      setGeneratedSQL(data.sql_query);
      setQueryResult(data.sql_result);
      setLlmResponse(data.bot_response);
      
      // 테이블 데이터 파싱
      setTableData(parseTableData(data.sql_result));
      
      // 히스토리에 추가
      addToHistory(question, data.sql_query, data.sql_result);
      
      // 응답 메시지 추가
      setChatMessages(prev => [
        ...prev, 
        {
          type: 'assistant',
          content: data.bot_response || '쿼리가 성공적으로 실행되었습니다.',
          timestamp: new Date().getTime(),
          sql: data.sql_query,
          result: data.sql_result
        }
      ]);
      
      // 입력 필드 초기화
      setQuestion('');
      
    } catch (error) {
      console.error('SQL-LLM 쿼리 오류:', error);
      setErrorMessage(error.message || '서버 오류가 발생했습니다.');
      
      // 오류 메시지 추가
      setChatMessages(prev => [
        ...prev, 
        {
          type: 'assistant',
          content: `오류: ${error.message || '서버 오류가 발생했습니다.'}`,
          timestamp: new Date().getTime()
        }
      ]);
    } finally {
      setIsLoading(false);
    }
  };
  
  // 예시 질문 클릭 핸들러
  const handleExampleClick = (exampleQuestion) => {
    setQuestion(exampleQuestion);
    inputRef.current?.focus();
  };
  
  // 차트 보기 핸들러
  const handleViewChart = () => {
    setShowChart(true);
  };
  
  // 날짜 포맷 함수
  const formatDate = (timestamp) => {
    const date = new Date(timestamp);
    return date.toLocaleDateString('ko-KR', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };
  
  return (
    <div className="flex flex-col h-full bg-[#0f172a] text-gray-100">
      {/* 헤더 */}
      <div className="flex items-center px-4 py-3 border-b border-gray-800/50">
        <div className="flex items-center">
          <div className="w-8 h-8 rounded-md bg-indigo-600 mr-3 flex items-center justify-center">
            <FiDatabase size={16} className="text-white" />
          </div>
          <div>
            <h1 className="text-lg font-bold text-white">
              SQL 쿼리 도우미
            </h1>
            <p className="text-xs text-gray-400">자연어를 SQL로 변환해 데이터베이스를 쉽게 조회할 수 있습니다.</p>
          </div>
        </div>
        
        <div className="ml-auto flex items-center gap-2">
          <button 
            onClick={() => setShowHistory(!showHistory)}
            className="px-3 py-1.5 rounded-md bg-gray-800 hover:bg-gray-700 text-gray-200 border border-gray-700/50 text-sm flex items-center gap-1.5 transition-colors"
          >
            <FiClock size={14} className="text-indigo-400" />
            <span>히스토리</span>
          </button>
          
          <button 
            onClick={() => setShowSchema(!showSchema)}
            className="px-3 py-1.5 rounded-md bg-gray-800 hover:bg-gray-700 text-gray-200 border border-gray-700/50 text-sm flex items-center gap-1.5 transition-colors"
          >
            <FiColumns size={14} className="text-indigo-400" />
            <span>DB 스키마 {showSchema ? '숨기기' : '보기'}</span>
          </button>
        </div>
      </div>
      
      <div className="flex-1 overflow-hidden flex">
        {/* 히스토리 사이드바 */}
        {showHistory && (
          <div className="w-64 border-r border-gray-800/70 bg-gray-900 flex-shrink-0 overflow-hidden flex flex-col">
            <div className="px-4 py-3 border-b border-gray-800/50 bg-gray-900 sticky top-0 z-10">
              <h3 className="text-sm font-medium text-white flex items-center gap-1.5">
                <FiClock size={14} className="text-indigo-400" />
                <span>쿼리 히스토리</span>
              </h3>
            </div>
            
            <div className="flex-1 overflow-y-auto px-2 py-3">
              {queryHistory.length === 0 ? (
                <div className="text-center text-gray-400 text-sm py-8">
                  <FiMessageCircle size={24} className="mx-auto mb-2 opacity-50" />
                  <p>쿼리 히스토리가 없습니다</p>
                </div>
              ) : (
                <div className="space-y-2">
                  {queryHistory.map(item => (
                    <button
                      key={item.id}
                      className="w-full text-left px-3 py-2 rounded-md hover:bg-gray-800/70 transition-colors group border border-gray-800/50"
                      onClick={() => loadFromHistory(item)}
                    >
                      <div className="text-xs text-indigo-400 mb-1 flex items-center justify-between">
                        <div className="flex items-center gap-1">
                          <FiMessageSquare size={10} />
                          <span>질문</span>
                        </div>
                        <span className="text-gray-500">{formatDate(item.timestamp)}</span>
                      </div>
                      <p className="text-sm text-gray-300 truncate">{item.question}</p>
                      
                      {item.sql && (
                        <div className="mt-1.5 text-[10px] text-gray-400 bg-gray-800/50 px-2 py-1 rounded truncate group-hover:text-gray-300">
                          {item.sql.length > 40 ? item.sql.substring(0, 40) + '...' : item.sql}
                        </div>
                      )}
                    </button>
                  ))}
                </div>
              )}
            </div>
            
            {queryHistory.length > 0 && (
              <div className="px-3 py-2 border-t border-gray-800/50 bg-gray-900">
                <button
                  className="w-full text-xs text-gray-400 hover:text-gray-300 py-1.5 px-3 bg-gray-800/50 hover:bg-gray-800 rounded-md transition-colors flex items-center justify-center gap-1.5"
                  onClick={() => {
                    if (window.confirm('모든 쿼리 히스토리를 삭제하시겠습니까?')) {
                      setQueryHistory([]);
                      localStorage.removeItem('sql_query_history');
                    }
                  }}
                >
                  <FiAlertCircle size={12} />
                  <span>히스토리 비우기</span>
                </button>
              </div>
            )}
          </div>
        )}
        
        {/* 메인 영역 */}
        <div className="flex-1 overflow-hidden flex flex-col">
          {/* 예시 질문 영역 */}
          <div className="bg-gray-900/40 border-b border-gray-800/50 py-2 px-4 flex items-center gap-2 overflow-x-auto whitespace-nowrap scrollbar-thin">
            <div className="text-xs text-indigo-400 flex items-center gap-1 flex-shrink-0">
              <FiHelpCircle size={12} />
              <span>예시:</span>
            </div>
            
            {exampleQuestions.map((q, idx) => (
              <button
                key={idx}
                type="button"
                onClick={() => handleExampleClick(q)}
                className="text-xs px-2.5 py-1.5 bg-gray-800/70 hover:bg-gray-800 
                          rounded-md text-gray-300 hover:text-white transition-colors flex items-center flex-shrink-0"
              >
                <FiArrowRight size={10} className="mr-1.5 text-indigo-400" />
                {q.length > 40 ? q.substring(0, 37) + '...' : q}
              </button>
            ))}
          </div>
          
          {/* 챗 영역 */}
          <div className="flex-1 overflow-hidden flex flex-col">
            <div className="flex-1 overflow-y-auto p-4">
              {/* 채팅 메시지 */}
              <div className="max-w-3xl mx-auto">
                {chatMessages.map((msg, index) => (
                  <MessageBubble 
                    key={index}
                    type={msg.type}
                    content={msg.content}
                    timestamp={msg.timestamp}
                    sql={msg.sql}
                    result={msg.result}
                    onViewChart={handleViewChart}
                  />
                ))}
                
                {/* 로딩 인디케이터 */}
                {isLoading && (
                  <div className="flex justify-start mb-4">
                    <div className="flex items-end gap-2">
                      <div className="rounded-full w-8 h-8 bg-gray-800 flex items-center justify-center">
                        <FiLoader size={14} className="text-indigo-400 animate-spin" />
                      </div>
                      <div>
                        <div className="rounded-2xl px-4 py-2.5 bg-gray-800/80 border border-gray-700/50">
                          <div className="flex space-x-1.5">
                            <div className="w-2 h-2 bg-indigo-400 rounded-full animate-pulse" style={{ animationDelay: '0ms' }}></div>
                            <div className="w-2 h-2 bg-indigo-400 rounded-full animate-pulse" style={{ animationDelay: '300ms' }}></div>
                            <div className="w-2 h-2 bg-indigo-400 rounded-full animate-pulse" style={{ animationDelay: '600ms' }}></div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
                <div ref={messagesEndRef} />
              </div>
            </div>
            
            {/* 오류 메시지 */}
            {errorMessage && (
              <div className="px-4 py-2 bg-red-900/20 border-t border-red-900/30 text-red-300 flex items-start gap-2 text-sm">
                <FiAlertCircle size={16} className="mt-0.5 flex-shrink-0 text-red-400" />
                <p>{errorMessage}</p>
              </div>
            )}
            
            {/* 차트 영역 */}
            {showChart && tableData && tableData.length > 0 && (
              <div className="px-4 py-3 border-t border-gray-800/50 bg-gray-900/50">
                <div className="flex items-center justify-between mb-3">
                  <h3 className="text-sm font-medium text-white flex items-center gap-1.5">
                    <FiBarChart2 size={14} className="text-indigo-400" />
                    <span>데이터 시각화</span>
                  </h3>
                  
                  <div className="flex items-center gap-2">
                    <div className="flex rounded-md overflow-hidden border border-gray-700/50">
                      <button 
                        className={`px-2 py-1 text-xs ${chartType === 'bar' ? 'bg-indigo-600 text-white' : 'bg-gray-800 text-gray-400 hover:text-gray-300'}`}
                        onClick={() => setChartType('bar')}
                      >
                        <FiBarChart2 size={12} />
                      </button>
                      <button 
                        className={`px-2 py-1 text-xs ${chartType === 'line' ? 'bg-indigo-600 text-white' : 'bg-gray-800 text-gray-400 hover:text-gray-300'}`}
                        onClick={() => setChartType('line')}
                      >
                        <FiActivity size={12} />
                      </button>
                      <button 
                        className={`px-2 py-1 text-xs ${chartType === 'pie' ? 'bg-indigo-600 text-white' : 'bg-gray-800 text-gray-400 hover:text-gray-300'}`}
                        onClick={() => setChartType('pie')}
                      >
                        <FiPieChart size={12} />
                      </button>
                      <button 
                        className={`px-2 py-1 text-xs ${chartType === 'area' ? 'bg-indigo-600 text-white' : 'bg-gray-800 text-gray-400 hover:text-gray-300'}`}
                        onClick={() => setChartType('area')}
                      >
                        <FiTrendingUp size={12} />
                      </button>
                    </div>
                    
                    <button 
                      className="p-1 text-gray-400 hover:text-gray-300 rounded"
                      onClick={() => setShowChart(false)}
                    >
                      <FiX size={16} />
                    </button>
                  </div>
                </div>
                
                <DataChart data={tableData} type={chartType} />
              </div>
            )}
            
            {/* 입력창 */}
            <div className="px-4 py-3 border-t border-gray-800/50 bg-gray-900/60">
              <form onSubmit={handleSubmit} className="max-w-3xl mx-auto">
                <div className="relative rounded-lg shadow-sm">
                  <input
                    ref={inputRef}
                    type="text"
                    value={question}
                    onChange={(e) => setQuestion(e.target.value)}
                    placeholder="데이터베이스에 질문하세요..."
                    className="w-full pl-4 pr-24 py-3 bg-gray-800/70 border border-gray-700/60 focus:border-indigo-500 
                            focus:ring-1 focus:ring-indigo-500/30 rounded-lg outline-none transition-all text-white text-sm"
                    disabled={isLoading}
                  />
                  
                  <div className="absolute right-2 top-1/2 transform -translate-y-1/2 flex gap-1">
                    <button
                      type="button"
                      onClick={handleSqlLlmQuery}
                      disabled={isLoading || !question.trim()}
                      className="p-2 text-gray-400 hover:text-indigo-400 disabled:opacity-50 disabled:hover:text-gray-400"
                      title="AI 응답 생성"
                    >
                      <FiZap size={16} />
                    </button>
                    
                    <button
                      type="submit"
                      disabled={isLoading || !question.trim()}
                      className="p-2 rounded-md bg-indigo-600 hover:bg-indigo-700 text-white disabled:opacity-50 disabled:bg-gray-700"
                    >
                      {isLoading ? <FiLoader size={16} className="animate-spin" /> : <FiSend size={16} />}
                    </button>
                  </div>
                </div>
              </form>
            </div>
          </div>
        </div>
        
        {/* 사이드바 - DB 스키마 */}
        {showSchema && (
          <div className="w-72 h-full overflow-y-auto bg-gray-900 border-l border-gray-800/70 flex-shrink-0">
            <div className="sticky top-0 bg-gray-900 z-10 py-3 px-4 border-b border-gray-800/50">
              <h3 className="text-sm font-medium text-white flex items-center gap-1.5">
                <FiDatabase size={14} className="text-indigo-400" />
                <span>데이터베이스 스키마</span>
              </h3>
              <p className="text-xs text-gray-400 mt-1">
                테이블 및 컬럼 구조를 확인할 수 있습니다.
              </p>
            </div>
            
            <div className="p-4 space-y-4">
              {dbSchema ? (
                parseDBSchema(dbSchema)
              ) : (
                <div className="flex items-center justify-center h-32 text-gray-500 text-sm">
                  <FiLoader size={16} className="animate-spin mr-2" />
                  스키마 정보를 불러오는 중...
                </div>
              )}
            </div>
            
            <div className="px-4 py-3 border-t border-gray-800/50">
              <h4 className="text-sm font-medium text-white mb-2.5 flex items-center gap-1.5">
                <FiTrendingUp size={14} className="text-indigo-400" />
                <span>활용 가이드</span>
              </h4>
              <ul className="text-xs text-gray-400 space-y-3">
                <li className="bg-gray-800/30 rounded-md p-3 border border-gray-700/50">
                  <div className="flex gap-2">
                    <FiExternalLink size={14} className="mt-0.5 text-indigo-400 flex-shrink-0" />
                    <div>
                      <p className="font-medium text-gray-300 mb-1">구체적인 질문하기</p>
                      <p className="text-gray-400">테이블 이름과 필드명을 명확하게 언급하면 더 정확한 결과를 얻을 수 있습니다.</p>
                    </div>
                  </div>
                </li>
                <li className="bg-gray-800/30 rounded-md p-3 border border-gray-700/50">
                  <div className="flex gap-2">
                    <FiPlay size={14} className="mt-0.5 text-indigo-400 flex-shrink-0" />
                    <div>
                      <p className="font-medium text-gray-300 mb-1">예시 질문 활용하기</p>
                      <p className="text-gray-400">제공된 예시 질문을 참고해 질문 형식을 구성해보세요.</p>
                    </div>
                  </div>
                </li>
              </ul>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default SQLQueryPage; 